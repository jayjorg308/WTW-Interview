-- Create Campsite Table
CREATE TABLE Campsite(id int NOT NULL IDENTITY(1,1) PRIMARY KEY, name varchar(200));

-- Populate Campsite Table
INSERT INTO Campsite(name)
VALUES
    ('Campsite Number 1'),
    ('Campsite Number 2'),
    ('Campsite Number 3'),
    ('Campsite Number 4');
    
-- Create Reservation Table    
CREATE TABLE Reservation(
  id int NOT NULL IDENTITY(1,1) PRIMARY KEY, 
  campsiteId int NOT NULL FOREIGN KEY REFERENCES Campsite(id),
  [date] date);

-- Populate Reservation Table
INSERT INTO Reservation(campsiteId, [date])
VALUES
    (1, '2020-03-08'),
    (2, '2020-03-08'),
    (3, '2020-03-08'),
    (4, '2020-04-15'),
    (1, '2020-04-18'),
    (2, '2020-05-14'),
    (3, '2020-05-15'),
    (4, '2020-05-15'),
    (1, '2020-06-08'),
    (2, '2020-07-09');
    
-- Create Availability Table    
CREATE TABLE Availability(
  id int NOT NULL IDENTITY(1,1) PRIMARY KEY, 
  campsiteId int NOT NULL FOREIGN KEY REFERENCES Campsite(id),
  [date] date);

-- Populate Availability Table
INSERT INTO Availability(campsiteId, [date])
VALUES
    (1, '2020-03-13'),
    (2, '2020-03-18'),
    (3, '2020-03-28'),
    (4, '2020-04-17'),
    (1, '2020-04-23'),
    (2, '2020-05-28'),
    (3, '2020-05-29'),
    (4, '2020-05-30'),
    (1, '2020-06-17'),
    (2, '2020-07-13');  
    
-- Add Reservation Stored Procedure
CREATE PROCEDURE AddReservation @CampsiteId int, @ReservationDate date
AS
INSERT INTO Reservation(campsiteId, [date])
VALUES(@CampsiteId, @ReservationDate);

-- Execute Add Reservation Stored Procedure
EXEC AddReservation @CampsiteId = 1, @ReservationDate = '2020-12-25';

-- Cancel Reservation Stored Procedure
CREATE PROCEDURE CancelReservation @ReservationId int
AS
DELETE FROM Reservation WHERE id = @ReservationId;

-- Execute Cancel Reservation Stored Procedure
EXEC CancelReservation @ReservationId = 6;

-- Create Campsite Availability View
CREATE VIEW [Campsite Availability]
AS
SELECT c.name as [Campsite Name], a.date [Available Date]
FROM Availability a
INNER JOIN Campsite c
ON a.campsiteId = c.id;

-- Select Campsite Availability View
SELECT * FROM [Campsite Availability];

-- Most Popular Day Function
CREATE FUNCTION getMostPopularDay()
RETURNS date
AS
BEGIN
	DECLARE @var date
    SELECT @var=(
      SELECT [date] 
      FROM Reservation 
      GROUP BY date 
      HAVING COUNT(date) = (SELECT TOP 1 COUNT(date)
        FROM Reservation
        GROUP BY [date]
        ORDER BY COUNT(date) DESC)) 
    RETURN @var
END;

-- Call Get Most Popular Day function
SELECT dbo.getMostPopularDay();    
